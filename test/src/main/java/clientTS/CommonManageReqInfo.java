package clientTS;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-23")
public class CommonManageReqInfo implements org.apache.thrift.TBase<CommonManageReqInfo, CommonManageReqInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CommonManageReqInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonManageReqInfo");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CALL_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("callMethod", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CALL_METHOD_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("callMethodParam", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CommonManageReqInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CommonManageReqInfoTupleSchemeFactory();

  public String uuid; // required
  public PARAMTYPE type; // required
  public String serviceName; // required
  public String callMethod; // required
  public String callMethodParam; // required
  public int timeout; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    TYPE((short)2, "type"),
    SERVICE_NAME((short)3, "serviceName"),
    CALL_METHOD((short)4, "callMethod"),
    CALL_METHOD_PARAM((short)5, "callMethodParam"),
    TIMEOUT((short)6, "timeout");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // TYPE
          return TYPE;
        case 3: // SERVICE_NAME
          return SERVICE_NAME;
        case 4: // CALL_METHOD
          return CALL_METHOD;
        case 5: // CALL_METHOD_PARAM
          return CALL_METHOD_PARAM;
        case 6: // TIMEOUT
          return TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMEOUT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "PARAMTYPE")));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_METHOD, new org.apache.thrift.meta_data.FieldMetaData("callMethod", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_METHOD_PARAM, new org.apache.thrift.meta_data.FieldMetaData("callMethodParam", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonManageReqInfo.class, metaDataMap);
  }

  public CommonManageReqInfo() {
  }

  public CommonManageReqInfo(
    String uuid,
    PARAMTYPE type,
    String serviceName,
    String callMethod,
    String callMethodParam,
    int timeout)
  {
    this();
    this.uuid = uuid;
    this.type = type;
    this.serviceName = serviceName;
    this.callMethod = callMethod;
    this.callMethodParam = callMethodParam;
    this.timeout = timeout;
    setTimeoutIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonManageReqInfo(CommonManageReqInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetCallMethod()) {
      this.callMethod = other.callMethod;
    }
    if (other.isSetCallMethodParam()) {
      this.callMethodParam = other.callMethodParam;
    }
    this.timeout = other.timeout;
  }

  public CommonManageReqInfo deepCopy() {
    return new CommonManageReqInfo(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.type = null;
    this.serviceName = null;
    this.callMethod = null;
    this.callMethodParam = null;
    setTimeoutIsSet(false);
    this.timeout = 0;
  }

  public String getUuid() {
    return this.uuid;
  }

  public CommonManageReqInfo setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public PARAMTYPE getType() {
    return this.type;
  }

  public CommonManageReqInfo setType(PARAMTYPE type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public CommonManageReqInfo setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public String getCallMethod() {
    return this.callMethod;
  }

  public CommonManageReqInfo setCallMethod(String callMethod) {
    this.callMethod = callMethod;
    return this;
  }

  public void unsetCallMethod() {
    this.callMethod = null;
  }

  /** Returns true if field callMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetCallMethod() {
    return this.callMethod != null;
  }

  public void setCallMethodIsSet(boolean value) {
    if (!value) {
      this.callMethod = null;
    }
  }

  public String getCallMethodParam() {
    return this.callMethodParam;
  }

  public CommonManageReqInfo setCallMethodParam(String callMethodParam) {
    this.callMethodParam = callMethodParam;
    return this;
  }

  public void unsetCallMethodParam() {
    this.callMethodParam = null;
  }

  /** Returns true if field callMethodParam is set (has been assigned a value) and false otherwise */
  public boolean isSetCallMethodParam() {
    return this.callMethodParam != null;
  }

  public void setCallMethodParamIsSet(boolean value) {
    if (!value) {
      this.callMethodParam = null;
    }
  }

  public int getTimeout() {
    return this.timeout;
  }

  public CommonManageReqInfo setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PARAMTYPE)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case CALL_METHOD:
      if (value == null) {
        unsetCallMethod();
      } else {
        setCallMethod((String)value);
      }
      break;

    case CALL_METHOD_PARAM:
      if (value == null) {
        unsetCallMethodParam();
      } else {
        setCallMethodParam((String)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case TYPE:
      return getType();

    case SERVICE_NAME:
      return getServiceName();

    case CALL_METHOD:
      return getCallMethod();

    case CALL_METHOD_PARAM:
      return getCallMethodParam();

    case TIMEOUT:
      return getTimeout();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case TYPE:
      return isSetType();
    case SERVICE_NAME:
      return isSetServiceName();
    case CALL_METHOD:
      return isSetCallMethod();
    case CALL_METHOD_PARAM:
      return isSetCallMethodParam();
    case TIMEOUT:
      return isSetTimeout();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonManageReqInfo)
      return this.equals((CommonManageReqInfo)that);
    return false;
  }

  public boolean equals(CommonManageReqInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_callMethod = true && this.isSetCallMethod();
    boolean that_present_callMethod = true && that.isSetCallMethod();
    if (this_present_callMethod || that_present_callMethod) {
      if (!(this_present_callMethod && that_present_callMethod))
        return false;
      if (!this.callMethod.equals(that.callMethod))
        return false;
    }

    boolean this_present_callMethodParam = true && this.isSetCallMethodParam();
    boolean that_present_callMethodParam = true && that.isSetCallMethodParam();
    if (this_present_callMethodParam || that_present_callMethodParam) {
      if (!(this_present_callMethodParam && that_present_callMethodParam))
        return false;
      if (!this.callMethodParam.equals(that.callMethodParam))
        return false;
    }

    boolean this_present_timeout = true;
    boolean that_present_timeout = true;
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetServiceName()) ? 131071 : 524287);
    if (isSetServiceName())
      hashCode = hashCode * 8191 + serviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallMethod()) ? 131071 : 524287);
    if (isSetCallMethod())
      hashCode = hashCode * 8191 + callMethod.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallMethodParam()) ? 131071 : 524287);
    if (isSetCallMethodParam())
      hashCode = hashCode * 8191 + callMethodParam.hashCode();

    hashCode = hashCode * 8191 + timeout;

    return hashCode;
  }

  @Override
  public int compareTo(CommonManageReqInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallMethod()).compareTo(other.isSetCallMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callMethod, other.callMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallMethodParam()).compareTo(other.isSetCallMethodParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallMethodParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callMethodParam, other.callMethodParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonManageReqInfo(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callMethod:");
    if (this.callMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.callMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callMethodParam:");
    if (this.callMethodParam == null) {
      sb.append("null");
    } else {
      sb.append(this.callMethodParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout:");
    sb.append(this.timeout);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonManageReqInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommonManageReqInfoStandardScheme getScheme() {
      return new CommonManageReqInfoStandardScheme();
    }
  }

  private static class CommonManageReqInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<CommonManageReqInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonManageReqInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = PARAMTYPE.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CALL_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callMethod = iprot.readString();
              struct.setCallMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CALL_METHOD_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callMethodParam = iprot.readString();
              struct.setCallMethodParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonManageReqInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      if (struct.callMethod != null) {
        oprot.writeFieldBegin(CALL_METHOD_FIELD_DESC);
        oprot.writeString(struct.callMethod);
        oprot.writeFieldEnd();
      }
      if (struct.callMethodParam != null) {
        oprot.writeFieldBegin(CALL_METHOD_PARAM_FIELD_DESC);
        oprot.writeString(struct.callMethodParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.timeout);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonManageReqInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommonManageReqInfoTupleScheme getScheme() {
      return new CommonManageReqInfoTupleScheme();
    }
  }

  private static class CommonManageReqInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<CommonManageReqInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonManageReqInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetServiceName()) {
        optionals.set(2);
      }
      if (struct.isSetCallMethod()) {
        optionals.set(3);
      }
      if (struct.isSetCallMethodParam()) {
        optionals.set(4);
      }
      if (struct.isSetTimeout()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetCallMethod()) {
        oprot.writeString(struct.callMethod);
      }
      if (struct.isSetCallMethodParam()) {
        oprot.writeString(struct.callMethodParam);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonManageReqInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = PARAMTYPE.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.callMethod = iprot.readString();
        struct.setCallMethodIsSet(true);
      }
      if (incoming.get(4)) {
        struct.callMethodParam = iprot.readString();
        struct.setCallMethodParamIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

